# Advanced MySQL Topics with Examples

## 1. Indexing & Performance Optimization
### 1.1 Indexes in MySQL
Indexes speed up query execution by allowing MySQL to locate data without scanning entire tables.

#### Creating Indexes:
```sql
CREATE INDEX idx_name ON employees(name);
CREATE UNIQUE INDEX idx_email ON users(email);
```

### 1.2 Types of Indexes
- **B-Tree Index** (default for most storage engines)
- **Full-Text Index** (used for text searches)
- **Hash Index** (used in MEMORY engine for exact matches)

### 1.3 Using EXPLAIN for Query Optimization
```sql
EXPLAIN SELECT * FROM orders WHERE customer_id = 10;
```
Analyzes how MySQL executes queries and suggests optimizations.

### 1.4 Partitioning Large Tables
```sql
CREATE TABLE sales (
    id INT NOT NULL,
    sale_date DATE NOT NULL,
    amount DECIMAL(10,2) NOT NULL
) PARTITION BY RANGE(YEAR(sale_date)) (
    PARTITION p1 VALUES LESS THAN (2021),
    PARTITION p2 VALUES LESS THAN (2022)
);
```

## 2. Transactions & Concurrency Control
Transactions ensure data consistency in multi-step operations.

### 2.1 Transaction Control
```sql
START TRANSACTION;
UPDATE accounts SET balance = balance - 500 WHERE id = 1;
UPDATE accounts SET balance = balance + 500 WHERE id = 2;
COMMIT;  -- Finalize changes
```

### 2.2 Isolation Levels
```sql
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
```
- **READ UNCOMMITTED** (allows dirty reads)
- **READ COMMITTED** (prevents dirty reads)
- **REPEATABLE READ** (prevents non-repeatable reads)
- **SERIALIZABLE** (highest isolation, but slowest)

## 3. Stored Procedures & Functions
### 3.1 Creating a Stored Procedure
```sql
DELIMITER //
CREATE PROCEDURE GetTotalSales()
BEGIN
    SELECT SUM(amount) FROM sales;
END //
DELIMITER ;
```

### 3.2 Creating a User-Defined Function (UDF)
```sql
DELIMITER //
CREATE FUNCTION CalculateDiscount(price DECIMAL(10,2)) RETURNS DECIMAL(10,2)
BEGIN
    RETURN price * 0.90;
END //
DELIMITER ;
```

## 4. Triggers & Event Scheduling
### 4.1 Creating a Trigger
```sql
CREATE TRIGGER before_order_insert
BEFORE INSERT ON orders
FOR EACH ROW
SET NEW.order_date = NOW();
```

### 4.2 Event Scheduling
```sql
CREATE EVENT daily_backup
ON SCHEDULE EVERY 1 DAY
DO
    CALL BackupDatabase();
```

## 5. MySQL Security & User Management
### 5.1 Creating Users and Granting Permissions
```sql
CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON database_name.* TO 'admin'@'localhost';
```

## 6. MySQL Backup & Recovery
### 6.1 Using mysqldump
```sh
mysqldump -u root -p database_name > backup.sql
```

### 6.2 Restoring a Backup
```sh
mysql -u root -p database_name < backup.sql
```

## 7. MySQL Replication & Clustering
### 7.1 Master-Slave Replication
```sql
CHANGE MASTER TO MASTER_HOST='192.168.1.100', MASTER_USER='replica', MASTER_PASSWORD='password';
START SLAVE;
```

## 8. JSON & NoSQL Features in MySQL
### 8.1 Storing and Querying JSON Data
```sql
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    details JSON
);
INSERT INTO users(details) VALUES ('{"name": "John", "age": 30}');
SELECT details->'$.name' FROM users;
```

## 9. MySQL in Web Applications
### 9.1 Preventing SQL Injection
Use prepared statements:
```php
$stmt = $conn->prepare("SELECT * FROM users WHERE email = ?");
$stmt->bind_param("s", $email);
$stmt->execute();
```

## 10. Advanced Query Optimization
### 10.1 Optimizing Joins
```sql
SELECT e.name, d.department FROM employees e
JOIN departments d ON e.dept_id = d.id;
```

### 10.2 Using Views
```sql
CREATE VIEW sales_summary AS
SELECT customer_id, SUM(amount) AS total_spent FROM sales GROUP BY customer_id;
```


